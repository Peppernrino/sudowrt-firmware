#!/bin/bash

# Script for building extender-node images based on home-node images

set -x


BUILD_DIR=built_firmware
workdir=$(pwd)
architecture="$*"

if [ -z "${architecture}" ]; then
  echo "Usage: ./build_extender-node <architecture>"
  echo " "
  echo "Example:"
  echo " "
  echo "  ./build_extender-node ar71xx"
  echo " "
  exit 1
fi

all_packages=$(cat openwrt_config/packages.extender-node)

source "${workdir}/openwrt_config/extender-node-vars.cfg"

openwrt_image_builder()
{
  local arch=$1
  local files_dir="${workdir}/files_extender-node"
  local parent_build_dir="${workdir}/${BUILD_DIR}/builder.${arch}"
  local build_dir="${workdir}/${BUILD_DIR}/builder.${arch}.extender-node"
  local kconfig="${workdir}/${BUILD_DIR}/openwrt/scripts/kconfig.pl"
  local config_dir="${workdir}/openwrt_config/arch_configs"
  local config="${build_dir}/.config"

  if [ ! -d "${parent_build_dir}" ]; then
    echo "No home-node build dir found. Please run ./build first."
    exit 1
  fi

  # Add the git commit hash and build date to the firmware
  build_number="$(git log --pretty=format:'%H' -n 1)"
  mkdir -p files_extender-node/opt/sudowrt
  echo "$build_number | built on $(date)" > files_extender-node/opt/sudowrt/build_version

  # Make hardlinks to avoid space duplication but to still isolate builds
  echo "Creating hardlinks to home-node build"
  cp -lr "${parent_build_dir}" "${build_dir}"

  # Delete hardlink to home-node config
  rm "$config" 2> /dev/null

  # Delete home-node files
  rm -rf "${build_dir}/files"
  
  # Copy extender-node files
  cp -a "${files_dir}" "${build_dir}/files"

  # Check if var is set from:
  # http://stackoverflow.com/a/13864829/1787596
  if [ -z "${CHANNEL_2_4+x}" ]; then true; else 
    sed -i /"CHANNEL_2_4="/c\ CHANNEL_2_4="$CHANNEL_2_4" "${build_dir}/files/etc/uci-defaults/99_wireless"
  fi

  if [ -z "${CHANNEL_5+x}" ]; then true; else
    sed -i /"CHANNEL_5="/c\ CHANNEL_5="$CHANNEL_5" "${build_dir}/files/etc/uci-defaults/99_wireless"
  fi

  if [ -z "${POWER_2_4+x}" ]; then true; else
    sed -i /"POWER_2_4="/c\ POWER_2_4="$POWER_2_4" "${build_dir}/files/etc/uci-defaults/99_wireless"
  fi

  if [ -z "${POWER_5+x}" ]; then true; else 
    sed -i /"POWER_5="/c\ POWER_5="$POWER_5" "${build_dir}/files/etc/uci-defaults/99_wireless"
  fi

  echo "Generating config file"
  # Include generic and arch-specific config options in config file
  $kconfig 'm+' "${config_dir}/generic" "${config_dir}/${arch}" > "${config}"

  # Complete config file generation
  cd "${build_dir}"

  # Importing feeds
  echo "Importing feeds"
  "${build_dir}/scripts/feeds" update -a > /dev/null

  # Include all common packages
  for pkg in ${all_packages}; do
    # Check if package name begins with a minus
    if [[ ${pkg:0:1} == "-" ]]; then
      pkg=${pkg:1:${#pkg}-1} # strip first character
      echo "CONFIG_PACKAGE_${pkg}=n" >> "${config}"
    else
      echo "CONFIG_PACKAGE_${pkg}=y" >> "${config}"     
    fi
  done

  # Install packages from feeds 
  # (download the source to package/feeds/feed_name/package_name)
  for pkg in ${all_packages}; do
      # Check if package name begins with a minus
      if [[ ${pkg:0:1} == "-" ]]; then
          pkg=${pkg:1:${#pkg}-1} # strip first character
          "${build_dir}/scripts/feeds" uninstall "${pkg}"
      else 
          "${build_dir}/scripts/feeds" install "${pkg}"
      fi
  done

  make defconfig V=s &> "${build_dir}/build.echo"

  # Delete hardlinks to previously built firmwares
  rm -rf "${build_dir}/bin/${arch}" 

  echo "Building ${arch} for extender node in dir: ${build_dir}"  
  make V=s -C "${build_dir}" &> "${build_dir}/build.extender-node.log"
  if [ "$?" != "0" ]; then
    echo "Image build for extender node for architecture '${arch}' has failed. See build.extender-node.log for details!"
    exit 1
  fi

  echo "Done!"
  echo "Extender node firmware images should be in ${build_dir}/bin/"
}



echo "Generating extender-node image for ${architecture}"
openwrt_image_builder "${architecture}"
